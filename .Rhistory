library(shiny); runApp('app_master.R')
setwd("P:\\Hackathon\\Data prep")
data_fish <-  read.csv(file="Data.csv")
TotalWhiting=sum(data_fish$Whiting, na.rm=TRUE)
Change=TotalWhiting*(abs(input$whitingslider)/100)
#Change=TotalWhiting*(abs(20)/100)
ChangePerFleet <- Change/dim(data_fish[data_fish$Whiting>0 & !is.na(data_fish$Whiting),])[1]
data_fish$Whiting_indicator=data_fish$Whiting-ChangePerFleet
data_fish$Whiting_indicator2=c()
for(i in 1:length(data_fish$Whiting_indicator)){
if(is.na(data_fish$Whiting_indicator[i])){
data_fish$Whiting_indicator2[i]="black"
}else if(data_fish$Whiting_indicator[i]<0){
data_fish$Whiting_indicator2[i]="red"
}else{
data_fish$Whiting_indicator2[i]="black"
}
}
TotalWhiting=sum(data_fish$Whiting, na.rm=TRUE)
Change=TotalWhiting*(abs(20)/100)
#Change=TotalWhiting*(abs(20)/100)
ChangePerFleet <- Change/dim(data_fish[data_fish$Whiting>0 & !is.na(data_fish$Whiting),])[1]
data_fish$Whiting_indicator=data_fish$Whiting-ChangePerFleet
data_fish$Whiting_indicator2=c()
for(i in 1:length(data_fish$Whiting_indicator)){
if(is.na(data_fish$Whiting_indicator[i])){
data_fish$Whiting_indicator2[i]="black"
}else if(data_fish$Whiting_indicator[i]<0){
data_fish$Whiting_indicator2[i]="red"
}else{
data_fish$Whiting_indicator2[i]="black"
}
}
data_fish$Whiting_changed <- data_fish$Whiting*(100+input$whitingslider)/100
data_fish$Whiting_changed <- data_fish$Whiting*(100+20)/100
for(i in 1:dim(data_fish)){
data_fish$total[i] <- sum(data_fish$Cod[i], data_fish$Haddock[i], data_fish$Whiting_changed[i], na.rm=TRUE)
}
data_fish$Cod.Row.total <-  data_fish$Cod/data_fish$total
data_fish$Haddock.Row.total <-  data_fish$Haddock/data_fish$total
data_fish$Whiting.Row.total <-  data_fish$Whiting_changed/data_fish$total
data_fish1 <- subset(data_fish, select = c(1,2,4,7,10))
data_fish1 <- filter(data_fish1, Country!= "UK (Channel Island Guernsey)" & Country!= "UK (Channel Island Jersey)")
data_fish1$Country=factor(data_fish1$Country)
data <- gather(data_fish1,key = "Species", value="CatchKG", -c(1,2))
data
empty_bar=2
nObsType=nlevels(as.factor(data$Species))
to_add = data.frame( matrix(NA, empty_bar*nlevels(data$Country)*nObsType, ncol(data)) )
colnames(to_add) = colnames(data)
to_add$Country=rep(levels(data$Country), each=empty_bar*nObsType )
data=rbind(data, to_add)
data=data %>% arrange(Country, Fleet)
data$id=rep( seq(1, nrow(data)/nObsType) , each=nObsType)
data
label_data= data %>% group_by(id, Fleet) %>% summarize(tot=sum(CatchKG))
number_of_bar=nrow(label_data)
angle= 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust<-ifelse( angle < -90, 1, 0)
label_data$angle<-ifelse(angle < -90, angle+180, angle)
label_data
label_data= data %>% group_by(id, Fleet) %>% summarize(tot=sum(CatchKG))
label_data
label_data= data %>% group_by(id, Fleet) %>% summarize(tot=sum(CatchKG, rm.na=TRUE))
label_data
label_data= data %>% group_by(id, Fleet) %>% summarize(tot=sum(CatchKG))
number_of_bar=nrow(label_data)
angle= 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust<-ifelse( angle < -90, 1, 0)
label_data$angle<-ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data=data %>%
group_by(Country) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data = base_data
grid_data$end = grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start = grid_data$start - 1
grid_data=grid_data[-1,]
ggplot(data) +
# Add the stacked bar
geom_bar(aes(x=as.factor(id), y=CatchKG*10, fill=Species), stat="identity", alpha=0.5) +
scale_fill_viridis(discrete=TRUE) +
#Add scale lines in blank spaces
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 5, xend = start, yend = 5), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 10, xend = start, yend = 10), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),3), y = c(0, 5, 10), label = c("0%", "50%", "100%") , color="grey", size=4 , angle=0, fontface="bold", hjust=1) +
ylim(-10,max(label_data$tot, na.rm=T)+20) +
theme_minimal() +
theme(
#legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
# Add labels on top of each bar
geom_text(data=label_data, aes(x=id, y=tot*10, label=Fleet, hjust=hjust), color='black', fontface="bold",alpha=0.6, size=5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -0.5, xend = end, yend = -0.5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -1, label=Country), hjust=c(0.5,1,1,0.5,0.5,0,0,0.5),
vjust=c(0,0,0,-1,0,0,0,0), colour = "black", alpha=0.8, size=3, fontface="bold", inherit.aes = FALSE)
runApp('P:/Hackathon/Shiny')
TotalWhiting=sum(data_fish$Whiting, na.rm=TRUE)
Change=TotalWhiting*(abs(input$whitingslider)/100)
ChangePerFleet <- Change/dim(data_fish[data_fish$Whiting>0 & !is.na(data_fish$Whiting),])[1]
data_fish$Whiting_indicator=data_fish$Whiting-ChangePerFleet
data_fish$Whiting_indicator2=c()
for(i in 1:length(data_fish$Whiting_indicator)){
if(is.na(data_fish$Whiting_indicator[i])){
data_fish$Whiting_indicator2[i]="black"
}else if(data_fish$Whiting_indicator[i]<0){
data_fish$Whiting_indicator2[i]="red"
}else{
data_fish$Whiting_indicator2[i]="black"
}
}
data_fish$Whiting_indicator2
data_fish$Whiting_changed <- data_fish$Whiting*(100+input$whitingslider)/100
for(i in 1:dim(data_fish)){
data_fish$total[i] <- sum(data_fish$Cod[i], data_fish$Haddock[i], data_fish$Whiting_changed[i], na.rm=TRUE)
}
data_fish$Cod.Row.total <-  data_fish$Cod/data_fish$total
data_fish$Haddock.Row.total <-  data_fish$Haddock/data_fish$total
data_fish$Whiting.Row.total <-  data_fish$Whiting_changed/data_fish$total
data_fish1 <- subset(data_fish, select = c(1,2,4,7,10))
data_fish1 <- filter(data_fish1, Country!= "UK (Channel Island Guernsey)" & Country!= "UK (Channel Island Jersey)")
data_fish1$Country=factor(data_fish1$Country)
data <- gather(data_fish1,key = "Species", value="CatchKG", -c(1,2))
#ChangeinF=(input$whitingslider-0.52)/0.52
# Set a number of 'empty bar' to add at the end of each group (Country)
empty_bar=2
nObsType=nlevels(as.factor(data$Species))
to_add = data.frame( matrix(NA, empty_bar*nlevels(data$Country)*nObsType, ncol(data)) )
colnames(to_add) = colnames(data)
to_add$Country=rep(levels(data$Country), each=empty_bar*nObsType )
data=rbind(data, to_add)
data=data %>% arrange(Country, Fleet)
data$id=rep( seq(1, nrow(data)/nObsType) , each=nObsType)
# Get the name and the y position of each label
label_data= data %>% group_by(id, Fleet) %>% summarize(tot=sum(CatchKG))
number_of_bar=nrow(label_data)
angle= 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust<-ifelse( angle < -90, 1, 0)
label_data$angle<-ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data=data %>%
group_by(Country) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data = base_data
grid_data$end = grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start = grid_data$start - 1
grid_data=grid_data[-1,]
ggplot(data) +
# Add the stacked bar
geom_bar(aes(x=as.factor(id), y=CatchKG*10, fill=Species), stat="identity", alpha=0.5) +
scale_fill_viridis(discrete=TRUE) +
#Add scale lines in blank spaces
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 5, xend = start, yend = 5), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 10, xend = start, yend = 10), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),3), y = c(0, 5, 10), label = c("0%", "50%", "100%") , color="grey", size=4 , angle=0, fontface="bold", hjust=1) +
ylim(-10,max(label_data$tot, na.rm=T)+20) +
theme_minimal() +
theme(
#legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
# Add labels on top of each bar
geom_text(data=label_data, aes(x=id, y=tot*10, label=Fleet, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -0.5, xend = end, yend = -0.5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -1, label=Country), hjust=c(0.5,1,1,0.5,0.5,0,0,0.5),
vjust=c(0,0,0,-1,0,0,0,0), colour = "black", alpha=0.8, size=3, fontface="bold", inherit.aes = FALSE)
label_data= data %>% group_by(id, Fleet) %>% summarize(tot=sum(CatchKG))
label_data
data
label_data= data %>% group_by(id, Fleet) %>% summarize(tot=sum(CatchKG, na.rm=TRUE))
label_data
label_data= data %>% group_by(id, Fleet) %>% summarize(tot=sum(CatchKG, na.rm=TRUE))
number_of_bar=nrow(label_data)
angle= 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust<-ifelse( angle < -90, 1, 0)
label_data$angle<-ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data=data %>%
group_by(Country) %>%
summarize(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data = base_data
grid_data$end = grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start = grid_data$start - 1
grid_data=grid_data[-1,]
ggplot(data) +
# Add the stacked bar
geom_bar(aes(x=as.factor(id), y=CatchKG*10, fill=Species), stat="identity", alpha=0.5) +
scale_fill_viridis(discrete=TRUE) +
#Add scale lines in blank spaces
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 5, xend = start, yend = 5), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 10, xend = start, yend = 10), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(data$id),3), y = c(0, 5, 10), label = c("0%", "50%", "100%") , color="grey", size=4 , angle=0, fontface="bold", hjust=1) +
ylim(-10,max(label_data$tot, na.rm=T)+20) +
theme_minimal() +
theme(
#legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
# Add labels on top of each bar
geom_text(data=label_data, aes(x=id, y=tot*10, label=Fleet, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -0.5, xend = end, yend = -0.5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -1, label=Country), hjust=c(0.5,1,1,0.5,0.5,0,0,0.5),
vjust=c(0,0,0,-1,0,0,0,0), colour = "black", alpha=0.8, size=3, fontface="bold", inherit.aes = FALSE)
runApp('~/app_dw.R')
runApp('P:/Hackathon/Shiny/app_ss.R')
runApp('P:/Hackathon/Shiny/app_ss.R')
install.packages("leaflet.minicharts")
library(leaflet.minicharts)
library(dplyr)
SAG_csv=read.csv("ICES-Stock-AssessmentGraphs-2018.v2.csv", header=TRUE)
head(SAG_csv)
names(SAG_csv)
sort(unique(SAG_csv$FishStock))
SAG_csv=read.csv("ICES-Stock-AssessmentGraphs-2018v2.csv", header=TRUE)
SAG_csv=read.csv("ICES-Stock-AssessmentGraphs-2018.v2.csv", header=TRUE)
data=read.csv("Data.csv", header=TRUE)
naems(data)
names(data)
table(data$Follow.up.year, useNA = "always")
table(data$ETO..1..yes..2.No., useNA = "always")
data=read.csv("Data.csv", header=TRUE)
table(data$reason.for.revision)
table(data$Follow.up.year, useNA = "always")
table(data$ETO..1..yes..2.No., useNA = "always")
names(data)
table(data$reason.for.revision)
table(data$Follow.up.year, useNA = "always")
table(data$ETO..1..yes..2.No., useNA = "always")
table(data$Consultant, useNA = "always")
table(data$Stem.type, useNA = "always")
names(data)
summary(data$proximal.stem.bicortical.contact..mm)
summary(data$Subsidence..mm)
summary(data$Stem.Length..MM)
sd(data$Stem.Length..MM, na.rm=TRUE)
data %>%
group_by(reason.for.revision) %>%
summarize(mean=mean(Subsidence..mm), sd=sd(Subsidence..mm),
median=median(Subsidence..mm), min=min(Subsidence..mm), max=max(Subsidence..mm))
library(dplyr)
data %>%
group_by(reason.for.revision) %>%
summarize(mean=mean(Subsidence..mm), sd=sd(Subsidence..mm),
median=median(Subsidence..mm), min=min(Subsidence..mm), max=max(Subsidence..mm))
boxplot(Subsidence..mm ~ reason.for.revision, data=data)
summary(aov(Subsidence..mm ~ reason.for.revision, data=data))
a1 <- aov(Subsidence..mm ~ reason.for.revision, data=data)
posthoc <- TukeyHSD(x=a1, conf.level=0.95)
posthoc
kruskal.test(Subsidence..mm ~ reason.for.revision, data=data)
data %>%
group_by(Stem.type) %>%
summarize(mean=mean(Subsidence..mm), sd=sd(Subsidence..mm),
median=median(Subsidence..mm), min=min(Subsidence..mm), max=max(Subsidence..mm))
boxplot(Subsidence..mm ~ Stem.type, data=data)
summary(aov(Subsidence..mm ~ Stem.type, data=data))
kruskal.test(Subsidence..mm ~ reason.for.revision, data=data)
kruskal.test(Subsidence..mm ~ Stem.type, data=data)
summary(aov(Subsidence..mm ~ Stem.type, data=data))
t.test(Subsidence..mm ~ Stem.type, data=data)
kruskal.test(Subsidence..mm ~ Stem.type, data=data)
wilcox.test(Subsidence..mm ~ Stem.type, data=data)
data %>%
group_by(Consultant) %>%
summarize(mean=mean(Subsidence..mm), sd=sd(Subsidence..mm),
median=median(Subsidence..mm), min=min(Subsidence..mm), max=max(Subsidence..mm))
boxplot(Subsidence..mm ~ Consultant, data=data)
summary(aov(Subsidence..mm ~ Consultant, data=data))
a1 <- aov(Subsidence..mm ~ Consultant, data=data)
TukeyHSD(x=a1, conf.level=0.95)
kruskal.test(Subsidence..mm ~ Consultant, data=data)
names(data)
plot(Subsidence..mm ~ proximal.stem.bicortical.contact..mm, data=data)
plot( proximal.stem.bicortical.contact..mm ~ Subsidence..mm, data=data)
cor.test(Subsidence..mm ~ proximal.stem.bicortical.contact..mm, data=data)
cor.test(data$Subsidence..mm, data$proximal.stem.bicortical.contact..mm)
data=read.csv("Data.csv", header=TRUE)
data=read.csv("Data.csv", header=TRUE)
shiny::runApp('H:/Stockbook/2018/2018_V1')
runApp('H:/Stockbook/2018/2018_V1')
runApp('H:/Stockbook/2018/2018_V1')
runApp('H:/Stockbook/2018/2018_V1')
runApp('H:/Stockbook/2018/2018_V1')
runApp('H:/Stockbook/2018/2018_V1')
runApp('H:/Stockbook/2018/2018_V1')
runApp('H:/Stockbook/2018/2018_V1')
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
library(ggplot2)
library(tidyr)
library(dplyr)
require(gridExtra)
library(stringr)
library(plotly)
library(RColorBrewer)
setwd("H:/Stockbook/2018/Forecasting for 2019")
sb <- read.csv("StockAssessmentGraphs_2018123.csv")
forecast <- read.csv("ForecastOptionsV2 - Copy.csv")
TAC <- read.csv("TAC.csv")
tail(TAC)
head(forecast)
names(forecast)
#Pick columns that are needed
forecast=forecast[c(1,3,4,5,7, 8,10,14,15,17, 18,20)]
dim(forecast)
forecast <- gather(forecast, "var", "value", 3:12)
forecast$Year=str_sub(forecast$var,-4,-1)
forecast$var=word(forecast$var,1,sep = "\\.")
forecast=forecast[c(1,5,2:4)]
forecast_stocks=unique(forecast$FishStock)
fornames <- c("FishStock", "Year", "R","SSB","Landings", "Catch","Discards",  "F","Bpa","Blim",
"Fmsy","Fpa","Flim","Basis")
sb <- sb[c(3, 7, 14, 23, 28, 30, 31, 36, 47, 46, 48, 45, 44)]
sb$Basis <- "Assessment"
names(sb) <- fornames
dim(sb)
sb2=filter(sb, FishStock %in% forecast_stocks)
dim(sb2)
sb<- left_join(sb2, TAC, by = c("FishStock", "Year"))
head(sb)
dim(sb2)
dim(sb)
sb <- sb[c(1,2,3,4,5,6,7,8,9,10,11,12,13,15,14)]
sb <- gather(sb, "var", "value", 3:14)
sb <- rbind(sb, forecast)
sb$Basis[sb$var %in% c("TAC")] <- "TAC"
sb <- read.csv("StockAssessmentGraphs_2018123.csv")
forecast <- read.csv("ForecastOptionsV2 - Copy.csv")
TAC <- read.csv("TAC.csv")
head(forecast)
names(forecast)
#Pick columns that are needed
forecast=forecast[c(1,3,4,5,7, 8,10,14,15,17, 18,20)]
dim(forecast)
forecast <- gather(forecast, "var", "value", 3:12)
forecast$Year=str_sub(forecast$var,-4,-1)
forecast$var=word(forecast$var,1,sep = "\\.")
forecast=forecast[c(1,5,2:4)]
forecast_stocks=unique(forecast$FishStock)
fornames <- c("FishStock", "Year", "R","SSB","Landings", "Catch","Discards",  "F","Bpa","Blim",
"Fmsy","Fpa","Flim","Basis")
sb <- sb[c(3, 7, 14, 23, 28, 30, 31, 36, 47, 46, 48, 45, 44)]
sb$Basis <- "Assessment"
names(sb) <- fornames
dim(sb)
sb2=filter(sb, FishStock %in% forecast_stocks)
dim(sb2)
sb<- left_join(sb2, TAC, by = c("FishStock", "Year"))
#sb=merge(x = sb2, y = TAC, by = c("FishStock", "Year"), all = TRUE)
#sb<- join(sb2, TAC, by = c("FishStock", "Year"), type="full")
sb <- sb[c(1,2,3,4,5,6,7,8,9,10,11,12,13,15,14)]
sb <- gather(sb, "var", "value", 3:14)
sb <- rbind(sb, forecast)
sb$Basis[sb$var %in% c("TAC")] <- "TAC"
write.csv(sb,"ForecastingData.csv")
runApp('H:/Stockbook/2018/2018_V1')
runApp('H:/Stockbook/2018/2018_V1')
runApp('H:/Stockbook/2018/2018_V1')
sb <- read.csv("StockAssessmentGraphs_2018123.csv")
forecast <- read.csv("ForecastOptionsV2 - Copy.csv")
TAC <- read.csv("TAC.csv")
head(forecast)
names(forecast)
#Pick columns that are needed
forecast=forecast[c(1,3,4,5,7, 8,10,14,15,17, 18,20)]
dim(forecast)
forecast <- gather(forecast, "var", "value", 3:12)
forecast$Year=str_sub(forecast$var,-4,-1)
forecast$var=word(forecast$var,1,sep = "\\.")
forecast=forecast[c(1,5,2:4)]
forecast_stocks=unique(forecast$FishStock)
fornames <- c("FishStock", "Year", "R","SSB","Landings", "Catch","Discards",  "F","Bpa","Blim",
"Fmsy","Fpa","Flim","Basis")
sb <- sb[c(3, 7, 14, 23, 28, 30, 31, 36, 47, 46, 48, 45, 44)]
sb$Basis <- "Assessment"
names(sb) <- fornames
dim(sb)
sb2=filter(sb, FishStock %in% forecast_stocks)
dim(sb2)
sb<- left_join(sb2, TAC, by = c("FishStock", "Year"))
#sb=merge(x = sb2, y = TAC, by = c("FishStock", "Year"), all = TRUE)
#sb<- join(sb2, TAC, by = c("FishStock", "Year"), type="full")
sb <- sb[c(1,2,3,4,5,6,7,8,9,10,11,12,13,15,14)]
sb <- gather(sb, "var", "value", 3:14)
sb <- rbind(sb, forecast)
sb$Basis[sb$var %in% c("TAC")] <- "TAC"
write.csv(sb,"ForecastingData.csv")
runApp('H:/Stockbook/2018/2018_V1')
runApp('H:/Stockbook/2018/2018_V1')
shiny::runApp('H:/Tagging/Deployed/Current-NewData')
runApp()
shiny::runApp()
shiny::runApp()
